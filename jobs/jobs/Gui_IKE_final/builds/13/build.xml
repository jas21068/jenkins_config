<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>jas</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.2.30-468.v5973151f8cfc">
      <queuingDurationMillis>1</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@752.vdddedf804e72">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35">
      <stagesUUID>08fd5e8f-646d-46e7-b343-670096b6a3f4</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2254.v2a_978de46f35">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Check Coverage</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">def output = sh(script: COVERAGE_SCRIPT, returnStdout: true).trim()
                    echo &quot;Coverage Output:\n${output}&quot;

                    // Parse the output to extract coverage percentage
                    def matcher = output =~ /Coverage:\s+([0-9.]+)/
                    if (matcher) {
                        def coverage = matcher[0][1].toFloat()  // Ensure it&apos;s a float
                        echo &quot;Extracted coverage: ${coverage}%&quot;

                        // Compare the coverage with MIN_COVERAGE, ensuring both are floats
                        if (coverage &gt;= MIN_COVERAGE) {
                            echo &quot;✅ Coverage above threshold&quot;
                            // Allow git pull if coverage is above threshold
                            // sh &quot;cd ${WORKSPACE_PATH} &amp;&amp; git pull&quot;
                        } else {
                            echo &quot;❌ Coverage below threshold&quot;
                            currentBuild.result = &apos;UNSTABLE&apos;
                            // Send email notification if coverage is below the threshold
                            mail to: &apos;your_email@example.com&apos;,
                                 subject: &quot;Code Coverage Alert: ${coverage}%&quot;,
                                 body: &quot;Coverage has dropped below ${MIN_COVERAGE}%.\n\n${output}&quot;
                        }
                    } else {
                        error &quot;Failed to parse coverage output&quot;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Run Tests</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;${TEST_COMMAND}&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>08fd5e8f-646d-46e7-b343-670096b6a3f4</uuid>
          </stages>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>COVERAGE_SCRIPT</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">python3 /home/jaskirat/gui_project/gui_ike_debugger/tests/check_coverage.py</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>TEST_COMMAND</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">pytest -v</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>MIN_COVERAGE</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="double">60.0</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>WORKSPACE_PATH</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">/home/jaskirat/gui_project/gui_ike_debugger</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
          <triggers>
            <triggers>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTrigger>
                <name>cron</name>
                <args>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                    <value class="string">H 1 * * *</value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                </args>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTrigger>
            </triggers>
          </triggers>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@4080.va_15b_44a_91525">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.2.30-468.v5973151f8cfc">
      <queuingDurationMillis>5</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>1</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>1188</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>25</queueId>
  <timestamp>1745040658697</timestamp>
  <startTime>1745040658708</startTime>
  <result>FAILURE</result>
  <duration>1284</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>pipeline {
    agent any

    environment {
        COVERAGE_SCRIPT = &quot;python3 /home/jaskirat/gui_project/gui_ike_debugger/tests/check_coverage.py&quot;
        TEST_COMMAND = &quot;pytest -v&quot;
        MIN_COVERAGE = 60.0
        WORKSPACE_PATH = &quot;/home/jaskirat/gui_project/gui_ike_debugger&quot;
    }

    stages {
        stage(&apos;Check Coverage&apos;) {
            steps {
                script {
                    // Run the coverage script and capture the output
                    def output = sh(script: COVERAGE_SCRIPT, returnStdout: true).trim()
                    echo &quot;Coverage Output:\n${output}&quot;

                    // Parse the output to extract coverage percentage
                    def matcher = output =~ /Coverage:\s+([0-9.]+)/
                    if (matcher) {
                        def coverage = matcher[0][1].toFloat()  // Ensure it&apos;s a float
                        echo &quot;Extracted coverage: ${coverage}%&quot;

                        // Compare the coverage with MIN_COVERAGE, ensuring both are floats
                        if (coverage &gt;= MIN_COVERAGE) {
                            echo &quot;✅ Coverage above threshold&quot;
                            // Allow git pull if coverage is above threshold
                            // sh &quot;cd ${WORKSPACE_PATH} &amp;&amp; git pull&quot;
                        } else {
                            echo &quot;❌ Coverage below threshold&quot;
                            currentBuild.result = &apos;UNSTABLE&apos;
                            // Send email notification if coverage is below the threshold
                            mail to: &apos;your_email@example.com&apos;,
                                 subject: &quot;Code Coverage Alert: ${coverage}%&quot;,
                                 body: &quot;Coverage has dropped below ${MIN_COVERAGE}%.\n\n${output}&quot;
                        }
                    } else {
                        error &quot;Failed to parse coverage output&quot;
                    }
                }
            }
        }

        stage(&apos;Run Tests&apos;) {
            steps {
                sh &quot;${TEST_COMMAND}&quot;
            }
        }
    }

    triggers {
        cron(&apos;H 1 * * *&apos;) // Runs daily at a random minute in the 1AM hour
    }
}
</script>
    <loadedScripts class="linked-hash-map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>57157383</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>39082069</long>
      </entry>
      <entry>
        <string>runQueue</string>
        <long>271404560</long>
      </entry>
      <entry>
        <string>run</string>
        <long>210593437</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>13771420</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>64499843</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>org.jenkinsci.plugins.pipeline.StageStatus.TAG_NAME</string>
    </internalCalls>
    <sandbox>true</sandbox>
    <iota>27</iota>
    <head>1:27</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
    <storageDir>workflow-completed</storageDir>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>