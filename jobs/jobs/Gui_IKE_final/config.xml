<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35">
      <jobProperties/>
      <triggers>
        <string>hudson.triggers.TimerTrigger</string>
      </triggers>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>H 1 * * *</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4080.va_15b_44a_91525">
    <script>pipeline {
    agent any

    environment {
        COVERAGE_SCRIPT = &quot;python3 tests/check_coverage.py&quot;
        TEST_COMMAND = &quot;pytest --cov=gui_ike_debugger tests/&quot;
        MIN_COVERAGE = &quot;67.28&quot;
        WORKSPACE_PATH = &quot;gui_ike_debugger&quot;
        TEST_PATH = &quot;gui_ike_debugger/tests&quot;
        VERBOSE_TEST_COMMAND = &quot;pytest -v&quot;
    }

    stages {
        stage(&apos;Clean Workspace&apos;) {
            steps {
                cleanWs()
            }
        }

        stage(&apos;Clone Project&apos;) {
            steps {
                // Replace this with the actual source or git repo as needed
                sh &quot;cp -r /home/jaskirat/gui_project/gui_ike_debugger .&quot;
            }
        }

        stage(&apos;Run Tests Verbosely&apos;) {
            steps {
                dir(&quot;/home/jaskirat/gui_project/gui_ike_debugger&quot;) {
                    script {
                        def testResult = sh(script: VERBOSE_TEST_COMMAND, returnStatus: true)
                        if (testResult != 0) {
                            // Send email notification if tests fail
                            mail to: &apos;jassep1974@gmail.com,vishal.fortinet42@gmail.com,lvannstruth@gmail.com&apos;,
                                 subject: &quot;JENKINS: Pytest Verbose Test Failed&quot;,
                                 body: &quot;The verbose pytest tests have failed. Please check the test logs for details.&quot;
                            error &quot;Tests failed with verbose output. Aborting further steps.&quot;
                        }
                    }
                }
            }
        }

        stage(&apos;Run Tests with Coverage&apos;) {
            steps {
                dir(&quot;${WORKSPACE_PATH}&quot;) {
                    sh &quot;${TEST_COMMAND}&quot;
                }
            }
        }

        stage(&apos;Check Coverage&apos;) {
            steps {
                dir(&quot;${WORKSPACE_PATH}&quot;) {
                    script {
                        def output = sh(script: COVERAGE_SCRIPT, returnStdout: true).trim()
                        echo &quot;Coverage Output:\n${output}&quot;

                        def matcher = output =~ /Coverage:\s+([0-9.]+)/ 
                        if (matcher) {
                            def coverageString = matcher[0][1]
                            def coverage = coverageString.toDouble()
                            echo &quot;Extracted coverage: ${coverage}&quot;

                            if (coverageString == MIN_COVERAGE) {
                                echo &quot;✅ Coverage above threshold&quot;
                            } else {
                                echo &quot;❌ Coverage below threshold&quot;
                                currentBuild.result = &apos;UNSTABLE&apos;
                                mail to: &apos;jassep1974@gmail.com,vishal.fortinet42@gmail.com,lvannstruth@gmail.com&apos;,
                                     subject: &quot;JENKINS:Code Coverage Alert: ${coverage}%&quot;,
                                     body: &quot;Coverage has dropped below ${MIN_COVERAGE}%.\n\n${output}&quot;
                            }
                        } else {
                            error &quot;Failed to parse coverage output&quot;
                        }
                    }
                }
            }
        }
    }

    triggers {
        cron(&apos;H 1 * * *&apos;) // Runs daily at a random minute in the 1AM hour
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>