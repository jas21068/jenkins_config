<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Utility task for Lukas, generates the json test strings and pushes a commit to Lukas&apos;s Github.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.43.0">
      <projectUrl>https://github.com/lvannstruth-ftnt/gui_ike_debugger_reforked/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4080.va_15b_44a_91525">
    <script>pipeline {
    agent any

    environment {
        WORKDIR = &quot;${env.WORKSPACE}/gui_ike_debugger_reforked&quot;
        REPODIR = &quot;${WORKDIR}/gui_ike_debugger_reforked&quot;
        SOURCEDIR = &quot;/home/lukas/lvs-dev/gui_ike_debugger_reforked&quot;
    }

    stages {
        stage(&apos;Prepare Environment&apos;) {
            steps {
                sh &apos;&apos;&apos;
                    cd &quot;${SOURCEDIR}&quot;
                    git fetch --all
                    git branch jenkins-backup
                    git reset --hard origin/main
                    rm -rf &quot;${WORKDIR}&quot;
                    mkdir -p &quot;${WORKDIR}&quot;
                    cp -r &quot;${SOURCEDIR}/&quot; &quot;${WORKDIR}/&quot;
                                    &apos;&apos;&apos;
            }
        }
        
        stage(&apos;Setup Python VENV&apos;) {
            steps {
                sh &apos;&apos;&apos;
                    # Install dependencies in virtual environment
                    python3 -m venv &quot;${REPODIR}/venv&quot;
                    source &quot;${REPODIR}/venv/bin/activate&quot;
                    pip install -r &quot;${REPODIR}/requirements.txt&quot;
                    cd &quot;${REPODIR}&quot; 
                    git pull
                &apos;&apos;&apos;
            }
        }
        stage(&apos;Generate new JSON files&apos;) {
            steps {
                dir(&quot;${env.REPODIR}&quot;) {
                    sh &apos;&apos;&apos;
                        # Activate virtual environment
                        source venv/bin/activate
                        python3 -m src.tests.generate_output
                    &apos;&apos;&apos;
                }
            }
        }

        stage(&apos;Update JSON_tests.py file&apos;) {
            steps {
                dir(&quot;${env.REPODIR}&quot;) {
                    sh &apos;&apos;&apos;
                        # Activate virtual environment
                        source venv/bin/activate
                        python3 -m src.tests.gen_test_strings
                    &apos;&apos;&apos;
                }
            }
        }
        stage(&apos;Push new files to Lukas Github&apos;) {
            steps {
                dir(&quot;${env.REPODIR}&quot;) {
                    sh &apos;&apos;&apos;
                        git config user.email &quot;lstruth@fortinet.com&quot;
                        git config user.name &quot;Jenkins Lukas ðŸ¤–&quot;
                        git add .
                        git commit -m &quot;Jenkins commited updated test files on $(date)&quot;
                        git pull --no-rebase
                        git push
                    &apos;&apos;&apos;
                    
                }
            }
        }
    }

}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>